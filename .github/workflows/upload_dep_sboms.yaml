name: Generate and Upload SBOMs for Pull Requests
on:
  pull_request:
    branches:
      - main

jobs:
  ptt-upload-sbom-pr:
    runs-on: ubuntu-latest

    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      SEMGREP_APP_URL: ${{ secrets.SEMGREP_APP_URL }}
      REPO_NAME: ${{ github.repository }}
      COMMIT_HASH: ${{ github.event.pull_request.head.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Install Java
        uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Set up Swift
        uses: fwal/setup-swift@v1
        with:
          swift-version: "5.7"

      - name: Install CDXGen
        run: npm install -g @cyclonedx/cdxgen@10.7.0

      - name: Generate and Upload SBOM
        run: |
          generate_bom() {
            local filetype="$1"
            local filename="$2"
            local alternate_filename="$3"

            echo filetype: $filetype
            echo filename: $filename
            echo alternate_filename: $alternate_filename

            find . -type f -name "$filename" ! -path "*/node_modules/*" ! -path "*/.venv/*" ! -path "*/.tox/*" ! -path "*/build/*" ! -path "*/dist/*" -exec sh -c '

              url_encode() {
                local string="$1"
                echo "$string" | jq -sRr @uri
              }

              swap_files() {
                if [ -f "$1" ] && [ -f "$2" ]; then
                  mv "$1" "$1.bak"
                  mv "$2" "$1"
                fi
              }

              restore_files() {
                if [ -f "$1.bak" ]; then
                  mv "$1" "$2"
                  mv "$1.bak" "$1"
                fi
              }


              filepath="$1"
              dirname=$(dirname "$filepath")
              alt_filepath="$dirname/'"$alternate_filename"'"

              # Temporarily swap files if alternate file exist
              if [ -f "$alt_filepath" ]; then
                echo "Temporarily swapping $filepath with $alt_filepath"
                swap_files "$filepath" "$alt_filepath"
              fi

              # Install Python deps in a virtual environment
              # Improves performance over using the cdxgen created venv as per
              # https://github.com/CycloneDX/cdxgen/blob/bc6edcf136cc4039df92e1d4e9a0b45e23bc2595/index.js#L2878
              if [ '"$filetype"' = "python" ]; then
                echo "Installing Python packages from $filepath"
                python3 -m venv "$dirname/venv"
                . "$dirname/venv/bin/activate"
                pip install -r "$filepath"
              fi

              echo "Generating SBOM for $filepath"
              encoded_filepath=$(url_encode "$filepath")
              echo encoded_filepath: $encoded_filepath
              
              bom_filename="semgrep-generated-sbom-${encoded_filepath}"
              echo bom_filename: $bom_filename

              (cd "$dirname" && cdxgen -t '"$filetype"' -o "${bom_filename}.json")

              # Deactivate and remove virtual environment
              if [ '"$filetype"' = "python" ]; then
                echo "Deactivating and removing virtual environment"
                deactivate
                rm -rf "$dirname/venv"
              fi

              # Restore original files after SBOM generation
              if [ -f "$alt_filepath" ]; then
                echo "Restoring $filepath with $alt_filepath"
                restore_files "$filepath" "$alt_filepath"
              fi


              # Read the SBOM content
              sbom_content=$(jq -Rs . < "$dirname/${bom_filename}.json")
              echo "SBOM content: $sbom_content"

              # Prepare JSON payload
              payload_file="$dirname/${bom_filename}.json.payload"
              echo "{\"repository_name\":\"$REPO_NAME\", \"commit_hash\":\"$COMMIT_HASH\", \"manifest_path\":\"$filepath\", \"sbom\":$sbom_content}" > "$payload_file"

              # Log the payload file size
              payload_size=$(stat --format="%s" "$payload_file")
              echo "Payload file size: $payload_size bytes"


              echo "Uploading ${bom_filename}.json"
              response=$(curl -v -s -o /dev/null -w "%{http_code}" -X POST -H "Authorization: Bearer $SEMGREP_APP_TOKEN" -H "Content-Type: application/json" \
                -d @"$payload_file" \
                $SEMGREP_APP_URL/api/sca/dependencies/upload_dep_sboms)
              echo "Response: $response"
              if [ "$response" -ne 200 ]; then
                echo "Failed to upload ${bom_filename}.json, received response code $response"
                exit 1
              fi

              # Clean up payload file
              rm "$payload_file"
            ' sh {} \;
          }

          generate_bom "python" "requirements.txt" "requirements.in"
          generate_bom "node" "package.json"
          generate_bom "gradle" "build.gradle"
          generate_bom "swift" "Package.swift"
